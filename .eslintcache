[{"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\index.js":"1","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\App.js":"2","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\reportWebVitals.js":"3","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Navbar.js":"4","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Browse.js":"5","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Search.js":"6","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Home.js":"7","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\endpoint.js":"8","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\MangaChapter.js":"9","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Manga.js":"10","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\SignIn.js":"11","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\SignUp.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":1057,"mtime":1614846202011,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":6624,"mtime":1614846301767,"results":"17","hashOfConfig":"14"},{"size":3649,"mtime":1614654519128,"results":"18","hashOfConfig":"14"},{"size":8613,"mtime":1614903105081,"results":"19","hashOfConfig":"14"},{"size":7863,"mtime":1614846147294,"results":"20","hashOfConfig":"14"},{"size":754,"mtime":1612782293808,"results":"21","hashOfConfig":"14"},{"size":14482,"mtime":1614924675519,"results":"22","hashOfConfig":"14"},{"size":3081,"mtime":1614320407209,"results":"23","hashOfConfig":"14"},{"size":5113,"mtime":1614904079512,"results":"24","hashOfConfig":"14"},{"size":7014,"mtime":1614931740393,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"z3gubh",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\index.js",[],["57","58"],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\App.js",[],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\reportWebVitals.js",[],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Navbar.js",[],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Browse.js",[],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Search.js",[],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Home.js",["59"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport { apiUpdateHistory, apiGetHistory, apiDeleteHistory } from \"../endpoint\";\r\n\r\nimport {\r\n    Grid,\r\n    Container,\r\n    Card,\r\n    CardActionArea,\r\n    CardContent,\r\n    CardMedia,\r\n    Typography,\r\n    Link,\r\n    Button,\r\n\r\n } from '@material-ui/core'\r\n\r\nimport { Link as RouterLink } from \"react-router-dom\"\r\nimport Cookies from 'universal-cookie';\r\nimport { createMuiTheme, makeStyles } from '@material-ui/core/styles';\r\nimport CardActions from '@material-ui/core/CardActions';\r\n\r\nimport {MuiThemeProvider} from '@material-ui/core'\r\n\r\nconst cookies = new Cookies()\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(6),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    root: {\r\n        maxWidth: 345,\r\n\r\n    },\r\n    mobileText:{\r\n\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: 12\r\n        }\r\n    }\r\n  }));\r\n\r\nexport default function Home() {\r\n\r\n    const [userHistory, setUserHistory] = useState([])\r\n    const [isLogin, setisLogin] = useState(false)\r\n    const classes = useStyles();\r\n\r\n\r\n    const theme = createMuiTheme({\r\n        palette:{\r\n\r\n            type:'dark'\r\n        }\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        tokenCheck();\r\n\r\n    }, [])\r\n\r\n    function UpdateDbUser(userHistory) {\r\n\r\n        let token = cookies.get(\"Mangamee_Login_Token\");\r\n        \r\n        axios.post(apiUpdateHistory,{\r\n\r\n            token   : token,\r\n            history : userHistory\r\n            \r\n        })\r\n        .then((res) => {\r\n            \r\n            // console.log(res.status)\r\n            if(res.status === 200){\r\n\r\n                window.location.href='/'\r\n            }\r\n            \r\n        })\r\n        \r\n    }\r\n\r\n    function DeleteDbUser() {\r\n        \r\n        let token = cookies.get(\"Mangamee_Login_Token\");\r\n        \r\n        axios.post(apiDeleteHistory,{\r\n\r\n            token   : token,\r\n            \r\n        })\r\n        .then((res) => {\r\n            \r\n            // console.log(res.status)\r\n            if(res.status === 200){\r\n\r\n                window.location.href='/'\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n    function tokenCheck(){\r\n\r\n        let userToken = cookies.get(\"Mangamee_Login_Token\");\r\n        // console.log(cookies.get(\"Mangamee_Login_Token\"))\r\n        // console.log(userToken)\r\n    \r\n        if(userToken !== undefined){\r\n    \r\n            fetchHistory(userToken);\r\n            setisLogin(true)\r\n    \r\n        }\r\n    \r\n      }\r\n\r\n    function fetchHistory(userToken){\r\n\r\n        axios.post(apiGetHistory,{\r\n    \r\n          token   : userToken\r\n    \r\n        })\r\n        .then((res) => {\r\n\r\n            // console.log(res.data.history)\r\n            // console.log(res.data)\r\n            if(res.data.history !== null){\r\n\r\n                setUserHistory(res.data.history)\r\n                let date = new Date(2030, 12)\r\n                cookies.set(\"Mangamee_Temp_History\", res.data.history, { path: \"/\", expires: date })  \r\n\r\n            }\r\n      \r\n        })\r\n        .catch(error => {\r\n            // console.log(error.response)\r\n            console.log(error)\r\n        })\r\n    \r\n    \r\n      }\r\n      \r\n    const homeTitle = (\r\n        <div>\r\n        <Grid container spacing={3} m={2} justify='center' style={{ marginTop : 125 }}>\r\n            <Typography variant=\"h4\" component=\"h4\" color='textPrimary'>\r\n                MANGAMEE\r\n            </Typography>\r\n        </Grid>\r\n        </div>\r\n    )\r\n\r\n    const userHistoryCard = (\r\n\r\n        <div>\r\n        {isLogin && (\r\n\r\n            <div>\r\n                <Grid container style={{ marginTop : 50 }} justify='center'>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"h6\">\r\n                            User History\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid \r\n                    container \r\n                    spacing={3} m={2}\r\n                    justify='center' \r\n                    style={{ marginTop : 10 }} >\r\n                        \r\n\r\n                {userHistory.map(item =>{\r\n                \r\n                return(\r\n                    <Grid item lg={2} xs={4} >\r\n                    <Card className={classes.root} style={{ height: '100%'}}>\r\n                        <CardActionArea>\r\n                        <Link underline='none' component={RouterLink} to={`/${item.Lang}/${item.ID}`}>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\" \"\r\n                            height=\"180\"\r\n                            src={item.CoverImg}\r\n                            title=\"manga title\"\r\n                        />\r\n                        <CardContent>\r\n                            <Typography noWrap \r\n                                        variant=\"body2\" \r\n                                        color=\"textSecondary\" \r\n                                        component=\"p\" \r\n                                        className={classes.mobileText}>\r\n\r\n                                {item.Name}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" \r\n                                        color=\"textSecondary\" \r\n                                        component=\"p\" \r\n                                        className={classes.mobileText}>\r\n\r\n\r\n                                {item.LatestRead}\r\n                            </Typography>\r\n                        </CardContent>\r\n                        </Link>\r\n                        </CardActionArea>\r\n                        <CardActions>\r\n                        \r\n                            <div onClick={() => {\r\n                                \r\n                                let tempHistory = cookies.get(\"Mangamee_Temp_History\");\r\n                                // get target data\r\n                                let mangaIDCookies = item.ID\r\n                                let date = new Date(2030, 12)\r\n                                // filter with mangaNameCookies\r\n\r\n                                if(tempHistory.length === 1){\r\n\r\n                                    cookies.remove(\"Mangamee_Temp_History\" ,{ path: '/' })\r\n                                    DeleteDbUser()\r\n\r\n                                    \r\n                            \r\n                                }else{\r\n                            \r\n                                    let cookiesFilter = tempHistory.filter((item) => item.ID !== mangaIDCookies);\r\n                                    // console.log(cookiesFilter)\r\n                                    cookies.set(\"Mangamee_Temp_History\", cookiesFilter, { path: \"/\", expires: date })\r\n                                    UpdateDbUser(cookiesFilter)\r\n                                    \r\n                                    \r\n                            \r\n                                }\r\n                            }}>\r\n                            <Button size=\"small\" \r\n                                    color=\"secondary\" \r\n                                    className={classes.mobileText}>\r\n                                        \r\n                                Delete\r\n                            </Button>\r\n                            </div>\r\n                        </CardActions>\r\n                    </Card>\r\n                    </Grid>\r\n                )})}\r\n                </Grid>\r\n            </div>  \r\n                \r\n        )}\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <MuiThemeProvider theme={theme}>\r\n                {homeTitle}\r\n                {userHistoryCard}\r\n                </MuiThemeProvider>\r\n            </Container>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\endpoint.js",["60"],"const MangameeBe = 'https://be-mangamee.herokuapp.com';\r\nconst MangameeBeLocal = 'http://127.0.0.1:8000';\r\n\r\n\r\nconst apiURL = '/api';\r\n\r\nexport const endpoint = `${MangameeBe}${apiURL}`;\r\n\r\n// export const endpoint = `${MangameeBeLocal}${apiURL}`;\r\n\r\nexport const apiBrowse = `${endpoint}/browse/`;\r\nexport const apiSearch = `${endpoint}/search/`;\r\nexport const apiManga = `${endpoint}/manga/`;\r\nexport const apiPage = `${endpoint}/page/`;\r\n\r\n// auth user\r\nexport const apiLogin = `${endpoint}/auth/login/`;\r\nexport const apiRegister = `${endpoint}/auth/register/`;\r\n\r\n\r\nexport const apiGetHistory = `${endpoint}/gethistory/`;\r\nexport const apiUpdateHistory = `${endpoint}/updatehistory/`;\r\nexport const apiDeleteHistory = `${endpoint}/deletehistory/`;\r\n",["61","62"],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\MangaChapter.js",["63","64","65"],"import React, { useState, useEffect } from 'react'\r\nimport { apiManga, apiUpdateHistory, apiPage } from \"../endpoint\";\r\nimport axios from 'axios'\r\nimport { useParams } from \"react-router-dom\"\r\nimport Cookies from 'universal-cookie';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LazyLoad from \"react-lazyload\";\r\n\r\nimport {\r\n    Grid,\r\n    Container,\r\n    Card,\r\n    CardActionArea,\r\n    CardContent,\r\n    CardMedia,\r\n    Typography,\r\n    ListItem,\r\n    List,\r\n    ListItemText,\r\n    Divider,\r\n    CircularProgress,\r\n    Button,\r\n    Dialog,\r\n    AppBar,\r\n    Toolbar,\r\n    TextField\r\n\r\n } from '@material-ui/core'\r\n\r\n\r\nimport {MuiThemeProvider, createMuiTheme } from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nconst cookies = new Cookies()\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n      position: 'relative',\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        fontSize: 14\r\n        }\r\n    },\r\n    mobileText:{\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            fontSize: 12\r\n        }\r\n    },\r\n    input: {\r\n        '& label.Mui-focused': {\r\n            color: '#FFFFFF'\r\n          },\r\n    },\r\n    notchedOutline: {\r\n        borderColor: \"#FFFFFF !important\"\r\n      }\r\n  }));\r\n\r\nexport default function MangaChapter() {\r\n\r\n\r\n    const classes = useStyles();\r\n    const { lang, manga_tile } = useParams()\r\n    const [loading, setLoading] = useState(true)\r\n    const [chapter, setChapter] = useState([])\r\n    const [info, setInfo] = useState({\r\n        \r\n        cover_img   : null,\r\n        summary     : null\r\n    })\r\n    \r\n    const theme = createMuiTheme({\r\n        palette:{\r\n\r\n            type:'dark'\r\n        }\r\n\r\n    })\r\n\r\n    // fillter function\r\n    const [fillterChapter, setFillterChapter] = useState(\"\")\r\n\r\n    const handleFilterChapter = (e) => {\r\n        setFillterChapter(e.target.value);\r\n    };\r\n\r\n    function FetchManga() {\r\n        \r\n        axios.get(apiManga, {\r\n            params:{\r\n\r\n                lang:lang,\r\n                manga_title:manga_tile\r\n            }\r\n        })\r\n\r\n        .then(res =>{\r\n        \r\n                // console.log(res.data.chapters)\r\n                // console.log(res.data.cover_img)\r\n                // console.log(res.data.summary)\r\n                setChapter(res.data.chapters)\r\n                setInfo({\r\n                    cover_img:res.data.cover_img,\r\n                    summary:res.data.summary,\r\n                    title:res.title    \r\n                })\r\n                \r\n                CreateOrUpdate(res.data.cover_img)\r\n                // console.log(res.data.chapters)\r\n                setLoading(false)\r\n                \r\n        })\r\n\r\n    }\r\n\r\n    function UpdateDbUser(userHistory) {\r\n\r\n        let token = cookies.get(\"Mangamee_Login_Token\");\r\n        \r\n        axios.post(apiUpdateHistory,{\r\n\r\n            token   : token,\r\n            history : userHistory\r\n            \r\n        })\r\n    }\r\n\r\n    function CreateOrUpdate(coverImg) {\r\n\r\n        let userToken = cookies.get(\"Mangamee_Login_Token\");\r\n        let tempHistory = cookies.get(\"Mangamee_Temp_History\");\r\n\r\n        // console.log(userToken)\r\n\r\n        if(userToken !== undefined){\r\n\r\n\r\n            if(tempHistory === undefined){\r\n\r\n                CreateCookies(coverImg)\r\n\r\n            }else{\r\n\r\n                UpdateCookies(tempHistory, coverImg)\r\n                   \r\n            }    \r\n        }\r\n    }\r\n\r\n\r\n    function CreateCookies(coverImg){\r\n\r\n        let tempName = cookies.get(\"Mangamee_Temp_Name\");\r\n\r\n        let userHistory = [\r\n            {\r\n                ID : manga_tile,\r\n                Lang : lang,\r\n                Name : tempName,\r\n                CoverImg : coverImg,\r\n                LatestRead : '-'\r\n            }\r\n        ]\r\n        \r\n        let date = new Date(2030, 12)\r\n        cookies.set(\"Mangamee_Temp_History\", userHistory, { path: \"/\", expires: date })\r\n        UpdateDbUser(userHistory)\r\n\r\n    }\r\n\r\n    function UpdateCookies(tempHistory, coverImg) {\r\n\r\n        let userHistory = tempHistory\r\n        let tempName = cookies.get(\"Mangamee_Temp_Name\");\r\n        // checking manga is input or not if, ga da, tambahin data,if ada, update\r\n\r\n        let checkName = manga_tile\r\n        let findName = userHistory.find((item) =>{\r\n            return item.ID === checkName\r\n        })\r\n\r\n        // console.log(userHistory)\r\n\r\n        if(findName === undefined){\r\n            \r\n            userHistory.push(\r\n                \r\n                {\r\n                    ID : manga_tile,\r\n                    Lang : lang,\r\n                    Name : tempName,\r\n                    CoverImg : coverImg,\r\n                    LatestRead : '-'\r\n\r\n                }\r\n            )\r\n\r\n            let date = new Date(2030, 12)\r\n            cookies.set(\"Mangamee_Temp_History\", userHistory, { path: \"/\", expires: date })\r\n            UpdateDbUser(userHistory)\r\n        }\r\n    }\r\n\r\n\r\n    // manga func  ---------------------------------------------------------------------------------\r\n\r\n\r\n    const [open, setOpen] = useState({\r\n\r\n        mangaIndex : null,\r\n        mangaData : [],\r\n        isModalOpen : false\r\n    });\r\n\r\n    const [tempMangaID, settempMangaID] = useState(0)\r\n    const [loadingManga, setloadingManga] = useState(true)\r\n    \r\n    const fecthManga = (id) => {\r\n\r\n        axios.get(apiPage, {\r\n            params:{\r\n\r\n                lang:lang,\r\n                manga_title:manga_tile,\r\n                chapter:chapter[id].link\r\n            }\r\n        })\r\n        .then(res =>{\r\n\r\n                // console.log(res.data)\r\n                setOpen({\r\n                    mangaIndex : id,\r\n                    mangaData : res.data,\r\n                    isModalOpen : true\r\n                    \r\n                })\r\n        })\r\n    }\r\n\r\n    function getIndex(chapter_name) {\r\n\r\n        return chapter.findIndex(item => item.link === chapter_name);\r\n    }\r\n\r\n    function updateCookiesChapter(tempID){\r\n\r\n        // get data\r\n        let MangaID = manga_tile\r\n        let lastChapter = chapter[tempID].chapter_name\r\n        let TempHistory = cookies.get(\"Mangamee_Temp_History\");\r\n\r\n\r\n        // update chapter .map cookies\r\n        if(TempHistory !== undefined){\r\n\r\n            let newChapter = TempHistory.map(obj =>\r\n                obj.ID === MangaID ? { ...obj, LatestRead: lastChapter } : obj\r\n            );\r\n        \r\n            // jsonvalue\r\n            let date = new Date(2030, 12)\r\n            cookies.set(\"Mangamee_Temp_History\", newChapter, { path: \"/\", expires: date })\r\n            UpdateDbUser(newChapter)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const handleImageError = (e) => {\r\n        e.target.onerror = null;\r\n        e.target.style.display = 'none'\r\n        e.target.src = \" \"\r\n    }\r\n\r\n    const handleClickOpen = (link) => {\r\n\r\n        let tempID = getIndex(link)\r\n        settempMangaID(tempID)\r\n        fecthManga(tempID)\r\n        updateCookiesChapter(tempID)\r\n        setloadingManga(false)\r\n    };\r\n  \r\n    const handleClose = () => {\r\n\r\n      setOpen({\r\n\r\n            mangaIndex : null,\r\n            isModalOpen : false,\r\n            mangaData : [],\r\n      });\r\n    };\r\n\r\n    const handlePrev = () => {\r\n\r\n        setloadingManga(true)\r\n        let id = tempMangaID\r\n        // check with length chapter\r\n        if(id !== (chapter.length -1)){\r\n\r\n            setOpen({\r\n\r\n                mangaIndex : null,\r\n                isModalOpen : true,\r\n                mangaData : [],\r\n            })\r\n            id = id + 1\r\n            settempMangaID(id)\r\n            // console.log(id)\r\n            fecthManga(id)\r\n            updateCookiesChapter(id)\r\n            \r\n        }\r\n        setloadingManga(false)\r\n    }\r\n\r\n    const handleNext = () => {\r\n\r\n        setloadingManga(true)\r\n\r\n        let id = tempMangaID\r\n        if(id !== 0){\r\n\r\n            setOpen({\r\n\r\n                mangaIndex : null,\r\n                isModalOpen : true,\r\n                mangaData : [],\r\n            })\r\n\r\n            id = id - 1\r\n            settempMangaID(id)\r\n            // console.log(id)\r\n            fecthManga(id)\r\n            updateCookiesChapter(id)\r\n\r\n        }\r\n        setloadingManga(false)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        FetchManga()\r\n       \r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <MuiThemeProvider theme={theme}>\r\n            <Container>\r\n\r\n            {loading ? (\r\n                <Grid container spacing={3} m={2} justify='center' style={{ marginTop : 150 }}>\r\n                    <CircularProgress color=\"secondary\"/>\r\n                </Grid>\r\n\r\n            ):(\r\n\r\n                <Grid container spacing={3} m={2} justify='center' style={{ marginTop : 100 }}>\r\n                    <Grid item lg={8} xs={12}>\r\n                    <Card style={{ height: '100%' }}>\r\n                        <CardActionArea>\r\n                        <CardMedia\r\n                            component=\"img\"\r\n                            alt=\" \"\r\n                            // height='60%'\r\n                            src={info.cover_img}\r\n                            title=\"manga title\"\r\n                        />\r\n                        <CardContent>\r\n                            <Typography variant=\"h6\" component=\"h6\">\r\n                                 summary\r\n                            </Typography>\r\n                            <br />\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                {info.summary}\r\n                            </Typography>\r\n                            <br />\r\n                            <Divider />\r\n                            <br />\r\n                            <form>\r\n                            <TextField id=\"outlined-basic\" \r\n                                       label=\"Search Chapter\" \r\n                                       variant=\"outlined\" \r\n                                       fullWidth\r\n                                       onChange={handleFilterChapter}\r\n                                       className={classes.input}\r\n                                       InputProps={{\r\n                                        classes: {\r\n                                          notchedOutline: classes.notchedOutline\r\n                                        }\r\n                                      }}/>\r\n\r\n                            </form>\r\n                            <br />\r\n                            <List>\r\n                                {chapter.filter((item) =>{\r\n                                    if (fillterChapter == \"\") {\r\n                                        return item\r\n                                    } else if (\r\n                                        item.chapter_name.toLowerCase().includes(fillterChapter.toLocaleLowerCase())\r\n                                    ) {\r\n                                        return item\r\n                                    }\r\n                                }).map((item, index) => (\r\n                                        <ListItem button>\r\n                                            <ListItemText style={{ color: '#FFFFFF' }} \r\n                                                        primary={item.chapter_name} \r\n                                                        onClick={e => handleClickOpen(item.link)}/>\r\n                                        </ListItem>\r\n                                ))}\r\n\r\n                                {/* {chapter.map((item, index) => (\r\n                                        <ListItem button>\r\n                                            <ListItemText style={{ color: '#FFFFFF' }} \r\n                                                        primary={item.chapter_name} \r\n                                                        onClick={e => handleClickOpen(index)}/>\r\n                                        </ListItem>\r\n                                ))} */}\r\n\r\n                            </List>   \r\n                        </CardContent>\r\n                        </CardActionArea>\r\n                    </Card>\r\n                    \r\n                    <Dialog fullScreen open={open.isModalOpen} onClose={handleClose}>\r\n  \r\n                        <AppBar style={{ background: '#2E3B55' }}>\r\n                        <Toolbar variant=\"dense\">\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                            <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography noWrap variant=\"h6\" className={classes.title}>\r\n                                {chapter[tempMangaID].chapter_name}\r\n                            </Typography>\r\n                            <Button autoFocus color=\"inherit\" onClick={e => handlePrev()} className={classes.mobileText}>\r\n                            Prev\r\n                            </Button>\r\n                            <Button autoFocus color=\"inherit\" onClick={e => handleNext()} className={classes.mobileText}>\r\n                            Next\r\n                            </Button>\r\n                        </Toolbar>\r\n                        </AppBar>\r\n\r\n                            {loadingManga ? (\r\n                                <Grid container spacing={3} m={2} justify='center' style={{ marginTop : 200 }}>\r\n                                    <CircularProgress color=\"secondary\"/>\r\n                                </Grid>\r\n                            ) : (\r\n\r\n                                <Grid container spacing={3} m={2} justify='center' style={{ marginTop : 50 }}>\r\n                                <Grid item lg={7} xs={12}>\r\n                                    {open.mangaData.map(item =>{\r\n                                        return(\r\n                                        <LazyLoad>\r\n                                        <CardMedia component='img' src={item.image} onError={handleImageError}/>\r\n                                        </LazyLoad>\r\n                                    )})}\r\n                                    \r\n                                </Grid>\r\n                                </Grid>    \r\n\r\n                            )  }\r\n\r\n                    </Dialog>\r\n                    </Grid>\r\n                </Grid>\r\n            )}\r\n            </Container>\r\n            </MuiThemeProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\Manga.js",["66","67"],"import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { apiPage, apiUpdateHistory } from \"../endpoint\";\r\nimport { useParams } from \"react-router-dom\"\r\nimport Cookies from 'universal-cookie';\r\nimport {\r\n    Grid,\r\n    Container,\r\n    CardMedia,\r\n    CircularProgress\r\n\r\n } from '@material-ui/core'\r\n\r\nconst cookies = new Cookies()\r\nexport default function Manga() {\r\n\r\n\r\n    const [list, setList] = useState([]);\r\n    const { lang, chapter, manga_tile } = useParams()\r\n    // const { chapter } = useParams()\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const handleImageError = (e) => {\r\n        e.target.onerror = null;\r\n        e.target.style.display = 'none'\r\n        e.target.src = \" \"\r\n    }\r\n\r\n    function UpdateDbUser(userHistory) {\r\n\r\n        let token = cookies.get(\"Mangamee_Login_Token\");\r\n        \r\n        axios.post(apiUpdateHistory,{\r\n\r\n            token   : token,\r\n            history : userHistory\r\n            \r\n        })\r\n    }\r\n\r\n\r\n    function updateCookiesChapter(){\r\n\r\n        // get data\r\n        let MangaID = manga_tile\r\n        let lastChapter = chapter\r\n        let TempHistory = cookies.get(\"Mangamee_Temp_History\");\r\n\r\n\r\n        // update chapter .map cookies\r\n        if(TempHistory != undefined){\r\n\r\n            let newChapter = TempHistory.map(obj =>\r\n                obj.ID === MangaID ? { ...obj, LatestRead: lastChapter } : obj\r\n            );\r\n        \r\n            // jsonvalue\r\n            console.log(newChapter)\r\n            let date = new Date(2030, 12)\r\n            cookies.set(\"Mangamee_Temp_History\", newChapter, { path: \"/\", expires: date })\r\n            UpdateDbUser(newChapter)\r\n\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        // console.log('ini apaaan dah')\r\n        let mounted = true;\r\n        axios.get(apiPage, {\r\n            params:{\r\n\r\n                lang:lang,\r\n                manga_title:manga_tile,\r\n                chapter:chapter\r\n            }\r\n        })\r\n\r\n        .then(res =>{\r\n            if(mounted){\r\n                // console.log(res.data)\r\n                setList(res.data)\r\n\r\n                updateCookiesChapter()\r\n                setLoading(false)\r\n            \r\n            }\r\n        })\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                \r\n                {loading && (\r\n                    <Grid container spacing={3} m={2} justify='center' style={{ marginTop : 100 }}>\r\n                    <CircularProgress color=\"secondary\"/>\r\n                    </Grid>\r\n                )}\r\n                \r\n                <Grid container spacing={3} m={2} justify='center' style={{ marginTop : 80 }}>\r\n                    <Grid item lg={8} xs={12}>\r\n                        {list.map(item =>{\r\n                            return(\r\n \r\n                                <CardMedia component='img' src={item.image} onError={handleImageError}/>\r\n   \r\n                        )})}\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n            </Container>   \r\n        </div>\r\n    )\r\n}\r\n",["68","69"],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\SignIn.js",[],"C:\\Users\\Dhiya Rifqi\\Downloads\\Programs\\React\\A\\mangamee-react\\src\\component\\SignUp.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":64,"column":8,"nodeType":"76","endLine":64,"endColumn":10,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":2,"column":7,"nodeType":"80","messageId":"81","endLine":2,"endColumn":22},{"ruleId":"70","replacedBy":"82"},{"ruleId":"72","replacedBy":"83"},{"ruleId":"74","severity":1,"message":"84","line":352,"column":8,"nodeType":"76","endLine":352,"endColumn":10,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":405,"column":56,"nodeType":"88","messageId":"89","endLine":405,"endColumn":58},{"ruleId":"90","severity":1,"message":"91","line":406,"column":56,"nodeType":"92","messageId":"93","endLine":406,"endColumn":58},{"ruleId":"90","severity":1,"message":"94","line":51,"column":24,"nodeType":"92","messageId":"93","endLine":51,"endColumn":26},{"ruleId":"74","severity":1,"message":"95","line":92,"column":8,"nodeType":"76","endLine":92,"endColumn":10,"suggestions":"96"},{"ruleId":"70","replacedBy":"97"},{"ruleId":"72","replacedBy":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tokenCheck'. Either include it or remove the dependency array.","ArrayExpression",["101"],"no-unused-vars","'MangameeBeLocal' is assigned a value but never used.","Identifier","unusedVar",["99"],["100"],"React Hook useEffect has a missing dependency: 'FetchManga'. Either include it or remove the dependency array.",["102"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'chapter', 'lang', 'manga_tile', and 'updateCookiesChapter'. Either include them or remove the dependency array.",["103"],["99"],["100"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [tokenCheck]",{"range":"110","text":"111"},"Update the dependencies array to be: [FetchManga]",{"range":"112","text":"113"},"Update the dependencies array to be: [chapter, lang, manga_tile, updateCookiesChapter]",{"range":"114","text":"115"},[1348,1350],"[tokenCheck]",[8361,8363],"[FetchManga]",[2238,2240],"[chapter, lang, manga_tile, updateCookiesChapter]"]